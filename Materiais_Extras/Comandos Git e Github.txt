Principais Comandos utilizados em sala

--------üìñüìñüìñüìñüìñ--------

git config --global user.name "Seu Nome" ‚Üí Adiciona o nome do usu√°rio na configura√ß√£o glogal.
git config --global user.email "seuemail@example.com" ‚Üí Adiciona o e-mail do usu√°rio na configura√ß√£o glogal.
git init ‚Üí Inicializa um reposit√≥rio Git em um diret√≥rio.
git status ‚Üí Exibe o status dos arquivos no reposit√≥rio.
git add nome_arquivo ‚Üí Adiciona um arquivo espec√≠fico para a √°rea de stage.
git add . ‚Üí Adiciona todos os arquivos modificados para a √°rea de stage.
git commit -m "Mensagem do commit" ‚Üí Cria um commit com uma mensagem descritiva.
git branch -M main ‚Üí Altera o nome do branch principal para main.
git push origin main ‚Üí Envia as mudan√ßas da branch local main para o reposit√≥rio remoto.
git clone URL_DO_REPOSITORIO ‚Üí Clona um reposit√≥rio remoto para sua m√°quina local.

--------üìñüìñüìñüìñüìñ--------

Configura√ß√£o =================
git config --global user.name "Seu Nome"
git config --global user.email "seuemail@example.com"

Inicializa√ß√£o e Clonagem ====================
git init ‚Üí Inicializa um reposit√≥rio Git em um diret√≥rio.
git clone URL_DO_REPOSITORIO ‚Üí Clona um reposit√≥rio remoto para sua m√°quina local.

Trabalho com Commits =======================
git status ‚Üí Exibe o status dos arquivos no reposit√≥rio.
git add nome_arquivo ‚Üí Adiciona um arquivo espec√≠fico para a √°rea de stage.
git add . ‚Üí Adiciona todos os arquivos modificados para a √°rea de stage.
git commit -m "Mensagem do commit" ‚Üí Cria um commit com uma mensagem descritiva.
git commit --amend -m "Nova mensagem" ‚Üí Modifica o √∫ltimo commit.

Branches ==========================
git branch ‚Üí Lista as branches existentes.
git branch nome-da-branch ‚Üí Cria uma nova branch.
git branch -M main ‚Üí Altera o nome do branch principal para main.git checkout nome-da-branch ‚Üí Muda para a branch especificada.
git checkout -b nome-da-branch ‚Üí Cria e j√° muda para a nova branch.
git switch -c nome-da-branch ‚Üí Cria e j√° muda para a nova branch -> mais atual.
git merge nome-da-branch ‚Üí Faz o merge da branch especificada com a branch atual.
git branch -d nome-da-branch ‚Üí Deleta uma branch local.
git checkout nome ‚Üí mudar de branch
git switch nome-da-branch ‚Üí mudar de branch -> mais atual.

Trabalho com Reposit√≥rios Remotos =========================
git remote add origin URL_DO_REPOSITORIO ‚Üí Adiciona um reposit√≥rio remoto ao projeto.
git remote set-url origin <novo-url> ‚Üí altera o remoto link
git remote remove origin ‚Üí remove o diretorio remoto o link
git push origin main ‚Üí Envia as mudan√ßas da branch local main para o reposit√≥rio remoto.
git push -u origin nome-da-branch ‚Üí Envia uma nova branch e a define como upstream.
git pull origin main ‚Üí Puxa as atualiza√ß√µes do reposit√≥rio remoto para a branch local.
git fetch ‚Üí Obt√©m as mudan√ßas do reposit√≥rio remoto sem aplic√°-las.
git remote -v ‚Üí Verificar qual remote est√° configurado para um reposit√≥rio.

Visualiza√ß√£o do Hist√≥rico =========================
git log ‚Üí Exibe o hist√≥rico de commits.
git log --oneline ‚Üí Exibe o hist√≥rico de commits de forma simplificada.

Revertendo Altera√ß√µes =============================
git checkout arquivo.txt ‚Üí Descarta as altera√ß√µes no arquivo especificado.
git restore arquivo.txt ‚Üí Descarta as altera√ß√µes no arquivo especificado. # mais atual
git checkout nome-da-branch ‚Üí Volta para o √∫ltimo commit
git switch nome-da-branch ‚Üí Volta para o √∫ltimo commit # mais atual
git reset HEAD arquivo.txt ‚Üí Remove o arquivo da √°rea de stage.
git reset --soft HEAD~1 ‚Üí Remove o √∫ltimo commit, mantendo as altera√ß√µes nos arquivos.
git reset --hard HEAD~1 ‚Üí Remove o √∫ltimo commit e descarta as altera√ß√µes.
git reset --soft <commit> ‚Üí Remove o commit, mantendo as altera√ß√µes nos arquivos.
git reset --hard <commit  > ‚Üí Remove o commit e descarta as altera√ß√µes.